<?php

/**
 * @file
 * Primary module hooks for Mailchimp Overlay module.
 */

/**
 * Loads a single MailchimpSignup entity by ID.
 *
 * The ID selected from the MailchimpOverlayAdminSettingsForm signup_page field.
 *
 * @return \Drupal\mailchimp_signup\Entity\MailchimpSignup
 * The MailchimpSignup entity.
 */
function get_mailchimp_signup_id() {
 $config                = \Drupal::config('mailchimp_overlay.settings');
 $signup_id             = $config->get('signup_page');
 $mailchimp_signup_load = mailchimp_signup_load($signup_id);
 return $mailchimp_signup_load;
}

function mailchimp_signup_form_id() {
 $signup = get_mailchimp_signup_id();
 if (!$signup==null) {
  $form_id = 'mailchimp_signup_subscribe_page_' . $signup->id . '_form';
  return $form_id;
 }
 return 0;
}

/**
 * Implements hook_js_settings_build().
 */
function mailchimp_overlay_js_settings_build(array &$settings, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {
 $settings['mailchimp_overlay']['path'] = '/mailchimp-overlay/enews-signup';
 $settings['mailchimp_overlay']['dialog_width'] = \Drupal::config('mailchimp_overlay.settings')->get('dialog_width');
}

/**
 * Implements hook_form_alter().
 */
function mailchimp_overlay_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
 $mailchimp_signup_form_id = mailchimp_signup_form_id();
 if ($form_id === $mailchimp_signup_form_id) {
//   $form['actions']['close']                    = [
//    '#type'                    => 'button',
//    '#value'                   => t('No Thanks!'),
//    '#name'                    => 'close',
//    '#button_type'             => 'link',
//    '#attributes'              => [
//     'class' => ['close-overlay', 'btn', 'btn-link'],
//    ],
//    '#limit_validation_errors' => TRUE,
//   ];
  $form['actions']['submit']['#ajax'] = [
   'callback' => 'mailchimp_overlay_ajax_submit',
  ];
 }
}

/**
 * The custom form processing Ajax submit handler for the Mailchimp Signup form.
 *
 * Handles the custom redirect for the Mailchimp Signup form.
 *
 * @param array $form
 *   Form API array structure.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state information.
 */
function mailchimp_overlay_ajax_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
 $response            = new Drupal\Core\Ajax\AjaxResponse();
 $response_wrapper_id = '#' . "mailchimp-response-" . $form['form_id']['#value'] . "-wrapper";

 // Simply return any status messages as a content the the response wrapper.
 $status_messages = ['#type' => 'status_messages'];
 $content         = \Drupal::service('renderer')->renderRoot($status_messages);
 $response->addCommand(new Drupal\Core\Ajax\HtmlCommand($response_wrapper_id, $content));

 // Also add an extra class to the form itself to signify the form changed.
 $form_wrapper_id = '#' . $form['form_id']['#value'] . "-wrapper";
 $response->addCommand(new Drupal\Core\Ajax\ChangedCommand($form_wrapper_id));

 // Ajax successfully submitted gives a confirmation_message output.
 if ($form_state->get('mailchimp_success')) {
  $title                = t('Success!');
  $signup               = get_mailchimp_signup_id();
  $confirmation_message = $signup->get('settings')['confirmation_message'];
  $HTMLoutput           = [
   '#theme'   => 'mailchimp_overlay_thankyou',
   '#title'   => $title,
   '#message' => [
    '#markup' => $confirmation_message,
   ],
  ];
  $response->addCommand(new Drupal\Core\Ajax\HtmlCommand("#mailchimp_overlay_wrapper", $HTMLoutput));
 }

 return $response;
}

/**
 * Implements hook_page_attachments().
 */
function mailchimp_overlay_page_attachments(array &$attachments) {
 /** @var \Drupal\Core\Routing\AdminContext $admin_context */
 $admin_context = \Drupal::service('router.admin_context');
 $config        = \Drupal::config('mailchimp_overlay.settings');
 //  when on admin pages.
 if ($admin_context->isAdminRoute()) {
  // add the cache tag, so that the output gets invalidated when the config is saved
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() == 'mailchimp_overlay.admin_settings') {
   \Drupal::service('renderer')->addCacheableDependency($attachments, $config);
  }
  // Remove cookie
  if (isset($_COOKIE['has_enews'])) {
   unset($_COOKIE['has_enews']);
   setcookie('has_enews', '', -1, '/');
  }
 }
 //  when NOT on admin pages.
 if (!$admin_context->isAdminRoute()) {
  if ($config->get('switch') === true) {
   $attachments['#attached']['library'][] = 'mailchimp_overlay/mailchimp-overlay-scripts';
   $attachments['#attached']['library'][] = 'mailchimp_overlay/mailchimp-overlay-styling';
  }
 }
}

/**
 * Implements hook_theme().
 */
function mailchimp_overlay_theme($existing, $type, $theme, $path) {
 return [
  'mailchimp_overlay_default'           => [
   'variables' => [
    'disclaimer' => null,
    'signupform' => null,
    'title'      => null,
   ],
  ],
  'mailchimp_overlay_modal_top_image'   => [
   'variables' => [
    'backgroundImage' => null,
    'backgroundColor' => null,
    'disclaimer'      => null,
    'signupform'      => null,
    'textColor'       => null,
    'title'           => null,
   ],
  ],
  'mailchimp_overlay_modal_left_image'  => [
   'variables' => [
    'backgroundImage' => null,
    'backgroundColor' => null,
    'disclaimer'      => null,
    'signupform'      => null,
    'textColor'       => null,
    'title'           => null,
   ],
  ],
  'mailchimp_overlay_modal_right_image' => [
   'variables' => [
    'backgroundImage' => null,
    'backgroundColor' => null,
    'disclaimer'      => null,
    'signupform'      => null,
    'textColor'       => null,
    'title'           => null,
   ],
  ],
  'mailchimp_overlay_fixed_bottom_bar'  => [
   'variables' => [
    'disclaimer' => null,
    'signupform' => null,
    'title'      => null,
   ],
  ],
  'mailchimp_overlay_thankyou'          => [
   'variables' => [
    'message' => null,
    'title'   => null,
   ],
  ],
 ];
}
